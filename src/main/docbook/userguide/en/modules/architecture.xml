<chapter id="architecture">
   <title>Architecture</title>
   <section id="architecture.tree_structure">
      <title>Data Structures Within The Cache</title>

      <para>
         A <literal>Cache</literal> consists of a collection of <literal>Node</literal> instances, organised in a tree
         structure. Each <literal>Node</literal> contains a <literal>Map</literal> which holds the data
         objects to be cached. It is important to note that the structure is a mathematical tree, and not a graph; each
         <literal>Node</literal> has one and only one parent, and the root node is denoted by the constant fully qualified
         name, <literal>Fqn.ROOT</literal>.
      </para>
      <para>
         <figure>
            <title>Data structured as a tree</title>
            <mediaobject>
               <imageobject>
                  <imagedata fileref="TreeCacheArchitecture.png"/>
               </imageobject>
            </mediaobject>
         </figure>

         In the diagram above, each box represents a JVM. You see 2 caches in separate JVMs, replicating data to each
         other.
      </para>

      <para>
         Any modifications (see <link linkend="api">API chapter</link>) in one cache instance will be replicated to
         the other cache. Naturally, you can have more than 2 caches in a cluster.
         Depending on the transactional settings, this replication will occur either after each modification or at the
         end of a transaction, at commit time. When a new cache is created, it can optionally acquire the contents
         from one of the existing caches on startup.
      </para>
   </section>

   <section id="architecture.SPI_interfaces">
      <title>SPI Interfaces</title>
      <para>
         In addition to <literal>Cache</literal> and <literal>Node</literal> interfaces, JBoss Cache exposes more
         powerful <literal>CacheSPI</literal> and <literal>NodeSPI</literal> interfaces, which offer more control over
         the internals of JBoss Cache. These interfaces are not intended for general use, but are designed for people
         who wish to extend and enhance JBoss Cache, or write custom <literal>Interceptor</literal> or
         <literal>CacheLoader</literal> instances.
      </para>
      <figure>
         <title>SPI Interfaces</title>

         <mediaobject>
            <imageobject>
               <imagedata fileref="SPI.png"/>
            </imageobject>
         </mediaobject>
      </figure>
      <para>
         The <literal>CacheSPI</literal> interface cannot be created, but is injected into <literal>Interceptor</literal>
         and <literal>CacheLoader</literal> implementations by the <literal>setCache(CacheSPI cache)</literal>
         methods on these interfaces. <literal>CacheSPI</literal> extends <literal>Cache</literal>
         so all the functionality of the basic API is also available.
      </para>
      <para>
         Similarly, a <literal>NodeSPI</literal> interface cannot be created. Instead, one is obtained by performing
         operations on <literal>CacheSPI</literal>, obtained as above. For example, <literal>Cache.getRoot() : Node</literal>
         is overridden as <literal>CacheSPI.getRoot() : NodeSPI</literal>.
      </para>
      <para>
         It is important to note that directly casting a <literal>Cache</literal> or <literal>Node</literal>
         to its SPI counterpart is not recommended and is bad practice, since the inheritace of interfaces it is not a
         contract that is guaranteed to be upheld moving forward. The exposed public APIs, on the other hand, is
         guaranteed to be upheld.
      </para>
   </section>

   <section id="architecture.invocations">
      <title>Method Invocations On Nodes</title>
      <para>
         Since the cache is essentially a collection of nodes, aspects such as clustering, persistence, eviction, etc.
         need to be applied to these nodes when operations are invoked on the cache as a whole or on individual nodes.
         To achieve this in a clean, modular and extensible manner, an interceptor chain is used. The chain is built
         up of a series of interceptors, each one adding an aspect or particular functionality. The chain is built
         when the cache is created, based on the configuration used.
      </para>
      <para>
         It is important to note that the <literal>NodeSPI</literal> offers some methods (such as the <literal>xxxDirect()</literal>
         method family) that operate on a node directly without passing through the interceptor stack. Plugin authors
         should note that using such methods will affect the aspects of the cache that may need to be applied, such as
         locking, replication, etc. To put it simply, don't use such methods unless you <emphasis>really</emphasis>
         know what you're doing!
      </para>

            <section id="architecture.interceptors">
         <title>Interceptors</title>
         <para>
            JBoss Cache essentially is a core data structure - an implementation of <literal>DataContainer</literal> - and
            aspects and features are implemented using interceptors in front of this data structure.  A
            <literal>CommandInterceptor</literal> is an abstract class, interceptor implementations extend this.
         </para>
         <para>
            <literal>CommandInterceptor</literal> implements the <literal>Visitor</literal> interface so it is able to
            alter commands in a strongly typed manner as the command makes its way to the data structure.  More on
            visitors and commands in the next section.
         </para>
         <para>
            Interceptor implementations are chained together in the <literal>InterceptorChain</literal> class, which
            dispatches a command across the chain of interceptors.  A special interceptor, the <literal>CallInterceptor</literal>,
            always sits at the end of this chain to invoke the command being passed up the chain by calling the
            command's <literal>process()</literal> method.
         </para>
         <para>
            JBoss Cache ships with several interceptors, representing different behavioral aspects, some of which
            are:
            <itemizedlist>
               <listitem>
                  <literal>TxInterceptor</literal>
                  - looks for ongoing transactions and registers with transaction managers to participate in
                  synchronization events
               </listitem>
               <listitem>
                  <literal>ReplicationInterceptor</literal>
                  - replicates state across a cluster using the RpcManager class
               </listitem>
               <listitem>
                  <literal>CacheLoaderInterceptor</literal>
                  - loads data from a persistent store if the data requested is not available in memory
               </listitem>
            </itemizedlist>
            The interceptor chain configured for your cache instance can be obtained and inspected by calling
            <literal>CacheSPI.getInterceptorChain()</literal>, which returns an ordered <literal>List</literal>
            of interceptors in the order in which they would be encountered by a command.
         </para>
         <section id="architecture.custom_interceptors">
            <title>Writing Custom Interceptors</title>
            <para>
               Custom interceptors to add specific aspects or features can be written by extending
               <literal>CommandInterceptor</literal> and overriding the relevant
               <literal>visitXXX()</literal> methods based on the commands you are interested in intercepting.  There
               are other abstract interceptors you could extend instead, such as the <literal>PrePostProcessingCommandInterceptor</literal>
               and the <literal>SkipCheckChainedInterceptor</literal>.  Please see their respective javadocs for details
               on the extra features provided.
            </para>
            <para>
               The custom interceptor will need to be added to the interceptor chain by using the
               <literal>Cache.addInterceptor()</literal> methods.  See the javadocs on these methods for details.
            </para>
            <para>
               Adding custom interceptors via XML is also supported, please see the
               <link linkend="configuration_reference_chapter">XML configuration reference</link> for details.
            </para>
         </section>
      </section>

       <section id="architecture.commands">
            <title>Commands and Visitors</title>
           <para>
              Internally, JBoss Cache uses a command/visitor pattern to execute API calls.  Whenever a method is called
              on the cache interface, the <literal>CacheInvocationDelegate</literal>, which implements the <literal>Cache</literal>
              interface, creates an instance of <literal>VisitableCommand</literal> and dispatches this command up a chain of
              interceptors.  Interceptors, which implement the <literal>Visitor</literal> interface, are able to handle
              <literal>VisitableCommand</literal>s they are interested in, and add behavior to the command.
            </para>
            <para>
              Each command contains all knowledge of the command being executed such as parameters used and processing
              behavior, encapsulated in a <literal>process()</literal> method.  For example, the <literal>RemoveNodeCommand</literal>
              is created and passed up the interceptor chain when <literal>Cache.removeNode()</literal> is called, and
              <literal>RemoveNodeCommand.process()</literal> has the necessary knowledge of how to remove a node from
              the data structure.
           </para>
           <para>
              In addition to being visitable, commands are also replicable.  The JBoss Cache marshallers know how to
              efficiently marshall commands and invoke them on remote cache instances using an internal RPC mechanism
              based on JGroups.
           </para>
        </section>
       
      <section id="architecture.invocationcontext">
         <title>InvocationContexts</title>
         <para>
            <literal>InvocationContext</literal>
            holds intermediate state for the duration of a single invocation, and is set up and
            destroyed by the
            <literal>InvocationContextInterceptor</literal>
            which sits at the start of the interceptor chain.
         </para>
         <para>
            <literal>InvocationContext</literal>
            , as its name implies, holds contextual information associated with a single cache
            method invocation. Contextual information includes associated
            <literal>javax.transaction.Transaction</literal>
            or
            <literal>org.jboss.cache.transaction.GlobalTransaction</literal>
            ,
            method invocation origin (
            <literal>InvocationContext.isOriginLocal()</literal>
            ) as well as
            <link
                  linkend="configuration.options">
               <literal>Option</literal>
               overrides
            </link>, and information around which nodes have been locked, etc.
         </para>
         <para>
            The
            <literal>InvocationContext</literal>
            can be obtained by calling
            <literal>Cache.getInvocationContext()</literal>.
         </para>
      </section>
   </section>

   <section id="architecture.managers">
      <title>Managers For Subsystems</title>
      <para>
         Some aspects and functionality is shared by more than a single interceptor. Some of these have been
         encapsulated
         into managers, for use by various interceptors, and are made available by the
         <literal>CacheSPI</literal>
         interface.
      </para>

      <section id="architecture.rpcmanager">
         <title>RpcManager</title>
         <para>
            This class is responsible for calls made via the JGroups channel for all RPC calls to remote caches, and
            encapsulates the JGroups channel used.
         </para>
      </section>

      <section id="architecture.buddymanager">
         <title>BuddyManager</title>
         <para>
            This class manages buddy groups and invokes group organization remote calls to organize a cluster of
            caches into smaller sub-groups.
         </para>
      </section>

      <section id="architecture.cacheloadermanager">
         <title>CacheLoaderManager</title>
         <para>
            Sets up and configures cache loaders. This class wraps individual
            <literal>CacheLoader</literal>
            instances
            in delegating classes, such as
            <literal>SingletonStoreCacheLoader</literal>
            or
            <literal>AsyncCacheLoader</literal>
            ,
            or may add the
            <literal>CacheLoader</literal>
            to a chain using the
            <literal>ChainingCacheLoader</literal>
            .
         </para>
      </section>

   </section>

   <section id="architecture.marshalling">
      <title>Marshalling And Wire Formats</title>
      <para>
         Early versions of JBoss Cache simply wrote cached data to the network by writing to an
         <literal>ObjectOutputStream</literal>
         during replication. Over various releases in the JBoss Cache 1.x.x series this approach was gradually
         deprecated
         in favor of a more mature marshalling framework. In the JBoss Cache 2.x.x series, this is the only officially
         supported and recommended mechanism for writing objects to datastreams.
      </para>
      <figure>
         <title>The Marshaller interface</title>

         <mediaobject>
            <imageobject>
               <imagedata fileref="Marshaller.png"/>
            </imageobject>
         </mediaobject>
      </figure>
      <section>
         <title>The Marshaller Interface</title>
         <para>
            The
            <literal>Marshaller</literal>
            interface extends
            <literal>RpcDispatcher.Marshaller</literal>
            from JGroups.
            This interface has two main implementations - a delegating
            <literal>VersionAwareMarshaller</literal>
            and a
            concrete
            <literal>CacheMarshaller300</literal>
            .
         </para>
         <para>
            The marshaller can be obtained by calling
            <literal>CacheSPI.getMarshaller()</literal>, and defaults to the
            <literal>VersionAwareMarshaller</literal>.
            Users may also write their own marshallers by implementing the
            <literal>Marshaller</literal>
            interface or extending the <literal>AbstractMarshaller</literal> class, and adding it to their configuration
            by using the <literal>Configuration.setMarshallerClass()</literal> setter.
         </para>
      </section>

      <section>
         <title>VersionAwareMarshaller</title>
         <para>
            As the name suggests, this marshaller adds a version
            <literal>short</literal>
            to the start of any stream when
            writing, enabling similar
            <literal>VersionAwareMarshaller</literal>
            instances to read the version short and
            know which specific marshaller implementation to delegate the call to.
            For example,
            <literal>CacheMarshaller200</literal>
            is the marshaller for JBoss Cache 2.0.x.
            JBoss Cache 3.0.x ships with
            <literal>CacheMarshaller300</literal>
            with an improved wire protocol.  Using a
            <literal>VersionAwareMarshaller</literal>
            helps achieve wire protocol compatibility between minor
            releases but still affords us the flexibility to tweak and improve the wire protocol between minor or micro
            releases.
         </para>
      </section>
   </section>
   <section id="architecture.regions">
      <title>Class Loading and Regions</title>
      <para>
         When used to cluster state of application servers, applications deployed in the application tend to put
         instances
         of objects specific to their application in the cache (or in an
         <literal>HttpSession</literal>
         object) which
         would require replication. It is common for application servers to assign separate
         <literal>ClassLoader</literal>
         instances to each application deployed, but have JBoss Cache libraries referenced by the application server's
         <literal>ClassLoader</literal>.
      </para>
      <para>
         To enable us to successfully marshall and unmarshall objects from such class loaders, we use a concept called
         regions. A region is a portion of the cache which share a common class loader (a region also has other uses -
         see <link linkend="eviction_policies">eviction policies</link>).
      </para>
      <para>
         A region is created by using the
         <literal>Cache.getRegion(Fqn fqn, boolean createIfNotExists)</literal>
         method,
         and returns an implementation of the
         <literal>Region</literal>
         interface. Once a region is obtained, a
         class loader for the region can be set or unset, and the region can be activated/deactivated. By default,
         regions
         are active unless the
         <literal>InactiveOnStartup</literal>
         configuration attribute is set to
         <literal>true</literal>.
      </para>
   </section>
</chapter>
