<server>
   <mbean code="org.jboss.cache.jmx.CacheJmxWrapper"
          name="jboss.cache:service=TreeCache">

      <depends>jboss:service=Naming</depends>
      <depends>jboss:service=TransactionManager</depends>

      <!--
          Configure the TransactionManager
      -->
      <attribute name="TransactionManagerLookupClass">org.jboss.cache.transaction.GenericTransactionManagerLookup
      </attribute>

      <!--
          Isolation level : SERIALIZABLE
                            REPEATABLE_READ (default)
                            READ_COMMITTED
                            READ_UNCOMMITTED
                            NONE
      -->
      <attribute name="IsolationLevel">REPEATABLE_READ</attribute>

      <!--
           Valid modes are LOCAL
                           REPL_ASYNC
                           REPL_SYNC
                           INVALIDATION_ASYNC
                           INVALIDATION_SYNC
      -->
      <attribute name="CacheMode">REPL_SYNC</attribute>

      <!--
      Just used for async repl: use a replication queue
      -->
      <attribute name="UseReplQueue">false</attribute>

      <!-- Name of cluster. Needs to be the same for all TreeCache nodes in a
           cluster in order to find each other.
      -->
      <attribute name="ClusterName">JBossCache-Cluster</attribute>

      <!--Uncomment next three statements to enable JGroups multiplexer.
This configuration is dependent on the JGroups multiplexer being
registered in an MBean server such as JBossAS.  -->
      <!--
      <depends>jgroups.mux:name=Multiplexer</depends>
      <attribute name="MultiplexerService">jgroups.mux:name=Multiplexer</attribute>
      <attribute name="MultiplexerStack">fc-fast-minimalthreads</attribute>
      -->

      <!--
       Whether or not to fetch state on joining a cluster
       NOTE this used to be called FetchStateOnStartup and has been renamed to be more descriptive.
      -->
      <attribute name="FetchInMemoryState">true</attribute>

      <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members in a clustered environment
      -->
      <attribute name="StateRetrievalTimeout">15000</attribute>

      <!--
          Number of milliseconds to wait until all responses for a
          synchronous call have been received.
      -->
      <attribute name="SyncReplTimeout">15000</attribute>

      <!-- Max number of milliseconds to wait for a lock acquisition -->
      <attribute name="LockAcquisitionTimeout">10000</attribute>

      <!-- Specific eviction policy configurations. This is LRU -->
      <attribute name="EvictionPolicyConfig">
         <config>
            <attribute name="wakeUpIntervalSeconds">2</attribute>
            <!-- Name of the DEFAULT eviction policy class. -->
            <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>

            <!-- Cache wide default -->
            <region name="/_default_">
               <attribute name="maxNodes">5000</attribute>
               <attribute name="timeToLiveSeconds">1000</attribute>
            </region>
            <region name="/org/jboss/data">
               <attribute name="maxNodes">5000</attribute>
               <attribute name="timeToLiveSeconds">1000</attribute>
            </region>
            <region name="/org/jboss/test/data">
               <attribute name="maxNodes">5</attribute>
               <attribute name="timeToLiveSeconds">4</attribute>
            </region>
         </config>
      </attribute>

      <!-- New 1.3.x cache loader config block -->
      <attribute name="CacheLoaderConfiguration">
         <config>
            <!-- if passivation is true, only the first cache loader is used; the rest are ignored -->
            <passivation>true</passivation>
            <preload>/</preload>
            <shared>false</shared>

            <!-- we can now have multiple cache loaders, which get chained -->
            <cacheloader>
               <class>org.jboss.cache.loader.FileCacheLoader</class>
               <!-- same as the old CacheLoaderConfig attribute
                  location=/tmp this can be part of the properties.
               -->
               <properties>
               </properties>
               <!-- whether the cache loader writes are asynchronous -->
               <async>false</async>
               <!-- only one cache loader in the chain may set fetchPersistentState to true.
 An exception is thrown if more than one cache loader sets this to true. -->
               <fetchPersistentState>true</fetchPersistentState>
               <!-- determines whether this cache loader ignores writes - defaults to false. -->
               <ignoreModifications>false</ignoreModifications>
            </cacheloader>

         </config>
      </attribute>

      <!--
         Indicate whether to use region based marshalling or not. Set this to true if you are running under a scoped
         class loader, e.g., inside an application server. Default is "false".
      -->
      <attribute name="UseRegionBasedMarshalling">false</attribute>
   </mbean>
</server>
